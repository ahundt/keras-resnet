'''Train a simple deep CNN on the CIFAR10 small images dataset.

GPU run command with Theano backend (with TensorFlow, the GPU is automatically used):
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10_cnn.py

It gets down to 0.65 test logloss in 25 epochs, and down to 0.55 after 50 epochs.
(it's still underfitting at that point, though).
'''

from __future__ import print_function
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras.callbacks import TensorBoard
from keras.callbacks import CSVLogger
from keras.callbacks import ModelCheckpoint
import time
import csv
import os

import resnet
import datetime

# http://stackoverflow.com/a/5215012/99379
def timeStamped(fname, fmt='%Y-%m-%d-%H-%M-%S_{fname}'):
    return datetime.datetime.now().strftime(fmt).format(fname=fname)

batch_sizes = [16,32,64]
nb_classes = 10
nb_epoch = 50
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# The CIFAR10 images are RGB.
img_channels = 3

# Compile and train different models while meauring performance.
results = []
for batch_size in batch_sizes:

    # The data, shuffled and split between train and test sets:
    (X_train, y_train), (X_test, y_test) = cifar10.load_data()
    print('X_train shape:', X_train.shape)
    print(X_train.shape[0], 'train samples')
    print(X_test.shape[0], 'test samples')

    # Convert class vectors to binary class matrices.
    Y_train = np_utils.to_categorical(y_train, nb_classes)
    Y_test = np_utils.to_categorical(y_test, nb_classes)

    # TODO switch to ResNetBuilder.build calls, permute parameters in 3x3 grid, generate plots for final assignment, save models?
    # use https://github.com/fchollet/keras/blob/master/examples/lstm_benchmark.py
    model = resnet.ResNetBuilder.build_resnet_18((img_channels, img_rows, img_cols), nb_classes)

    # Let's train the model using RMSprop
    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    X_train = X_train.astype('float32')
    X_test = X_test.astype('float32')
    X_train /= 255
    X_test /= 255

    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(X_train, Y_train,
                  batch_size=batch_size,
                  nb_epoch=nb_epoch,
                  validation_data=(X_test, Y_test),
                  shuffle=True)
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # Compute quantities required for featurewise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(X_train)
        dirname = timeStamped(str(batch_size) + 'batch_cifar10_resnet')
        out_dir='/home/ahundt/datasets/parallel/'+dirname+'/'
        if not os.path.exists(out_dir):
            os.makedirs(out_dir)
        
        tensorboard = TensorBoard(log_dir=out_dir, histogram_freq=10, write_graph=True)
        csv = CSVLogger(out_dir+dirname+'.csv', separator=',', append=True)
        model_checkpoint = ModelCheckpoint(out_dir+'weights.hdf5', monitor='val_loss', verbose=0, save_best_only=True, save_weights_only=False, mode='auto')

        start_time = time.time()
        # Fit the model on the batches generated by datagen.flow().
        history = model.fit_generator(datagen.flow(X_train, Y_train,
                            batch_size=batch_size),
                            samples_per_epoch=X_train.shape[0],
                            nb_epoch=nb_epoch,
                            validation_data=(X_test, Y_test),

                            callbacks =[tensorboard,csv,model_checkpoint])

        end_fit_time = time.time()
        average_time_per_epoch = (end_fit_time - start_time) / epochs
        
        model.predict(X_test, batch_size=batch_size, verbose=1)

        end_predict_time = time.time()
        average_time_to_predict = (end_predict_time - end_fit_time) / epochs

        results.append((history, average_time_per_epoch, average_time_to_predict))
        # Compare models' accuracy, loss and elapsed time per epoch.
        plt.ioff()
        plt.style.use('ggplot')
        ax1 = plt.subplot2grid((2, 2), (0, 0))
        ax1.set_title('Accuracy')
        ax1.set_ylabel('Validation Accuracy')
        ax1.set_xlabel('Epochs')
        ax2 = plt.subplot2grid((2, 2), (1, 0))
        ax2.set_title('Loss')
        ax2.set_ylabel('Validation Loss')
        ax2.set_xlabel('Epochs')
        ax3 = plt.subplot2grid((2, 2), (0, 1), rowspan=2)
        ax3.set_title('Time')
        ax3.set_ylabel('Seconds')
        for mode, result in zip(modes, results):
            ax1.plot(result[0].epoch, result[0].history['val_acc'], label=mode)
            ax2.plot(result[0].epoch, result[0].history['val_loss'], label=mode)
        ax1.legend()
        ax2.legend()
        ax3.bar(np.arange(len(results)), [x[1] for x in results],
                tick_label=modes, align='center')
        plt.tight_layout()
        plt.savefig('/home/ahundt/datasets/parallel/'+dirname+'/'+dirname+'_fig.png')
        
        with open(out_dir+dirname+"_results.csv", "wb") as f:
            writer = csv.writer(f)
            writer.writerows(results)